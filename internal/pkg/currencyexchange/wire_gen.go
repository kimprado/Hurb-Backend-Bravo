// Code generated by Wire. DO NOT EDIT.

//go:generate wire
//+build !wireinject

package currencyexchange

import (
	"github.com/rep/exchange/internal/pkg/commom/config"
	"github.com/rep/exchange/internal/pkg/commom/logging"
	"github.com/rep/exchange/internal/pkg/infra/redis"
)

// Injectors from wire.go:

func initializeConfigTest() (config.Configuration, error) {
	string2 := newIntegrationConfigFile()
	configuration, err := config.NewConfig(string2)
	if err != nil {
		return config.Configuration{}, err
	}
	return configuration, nil
}

func initializeRedisTest(config2 config.Configuration) (redis.DBConnection, error) {
	redisDB := config.NewRedisDB(config2)
	loggingLevels := config.NewLoggingLevels(config2)
	loggerRedisDB := logging.NewRedisDB(loggingLevels)
	dbConnection, err := redis.NewDBConnection(redisDB, loggerRedisDB)
	if err != nil {
		return nil, err
	}
	return dbConnection, nil
}

func initializeCurrencyManagerDBTest(config2 config.Configuration) (*CurrencyManagerDB, error) {
	redisDB := config.NewRedisDB(config2)
	loggingLevels := config.NewLoggingLevels(config2)
	loggerRedisDB := logging.NewRedisDB(loggingLevels)
	dbConnection, err := redis.NewDBConnection(redisDB, loggerRedisDB)
	if err != nil {
		return nil, err
	}
	loggerCurrency := logging.NewCurrency(loggingLevels)
	currencyManagerDB := NewCurrencyManagerDB(dbConnection, redisDB, config2, loggerCurrency)
	return currencyManagerDB, nil
}

func initializeRatesFinderServiceTest(config2 config.Configuration) (*RatesFinderService, error) {
	loggingLevels := config.NewLoggingLevels(config2)
	loggerRates := logging.NewRates(loggingLevels)
	ratesFinderService := NewRatesFinderService(config2, loggerRates)
	return ratesFinderService, nil
}

func initializeCalculatorControllerTest(cm CurrencyManager, rf RatesFinder) (*CalculatorController, error) {
	currencyExchanger := NewCurrencyExchanger()
	string2 := newIntegrationConfigFile()
	configuration, err := config.NewConfig(string2)
	if err != nil {
		return nil, err
	}
	loggingLevels := config.NewLoggingLevels(configuration)
	loggerCalculator := logging.NewCalculator(loggingLevels)
	calculatorController := NewCalculatorController(cm, rf, currencyExchanger, loggerCalculator)
	return calculatorController, nil
}
